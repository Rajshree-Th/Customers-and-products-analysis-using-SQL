USE myproject;

SELECT * FROM customers;
SELECT * FROM employees;
SELECT * FROM offices;
SELECT * FROM orderdetails;
SELECT * FROM orders;
SELECT * FROM payments;
SELECT * FROM productlines;
SELECT * FROM products;

-- Inserting new recorde into the 'employees' table
INSERT INTO employees(employeeNumber, lastName, firstName, extension, email, officeCode, reportsTo, jobTitle)
VALUES('1991', 'Green', 'Jennifer', 'x7951', 'jgreen@classicmodelcars.com', '7', '1076', 'Sales Manager');

-- Updating the "quantity" column of "products" table to 2002 where "product_id" is S10_1099.
UPDATE products
SET quantityInStock = 2002
WHERE productCode = 'S12_1099';

-- Deleting all records from "orders" table where the status is "Cancelled".
SELECT status, COUNT(*)
FROM orders
GROUP BY status;

SELECT orders.orderNumber, status
FROM orders
WHERE status="Cancelled";

SELECT orderNumber FROM orderdetails
WHERE orderNumber IN (SELECT orders.orderNumber FROM orders WHERE status="Cancelled");

DELETE FROM orderdetails
WHERE orderNumber IN (SELECT orders.orderNumber FROM orders WHERE status="Cancelled");

DELETE FROM orders WHERE status="Cancelled";

-- Retrieving all the columns from the 'employees' table where the salary is greater than or equal to 5000
ALTER TABLE employees
ADD salary int;

UPDATE employees
SET jobTitle = "Sales Manager (EMEA)"
WHERE employeeNumber = 1102;

UPDATE employees
SET salary = 
CASE 
	WHEN jobTitle = "President" THEN 50000
	WHEN jobTitle = "VP Sales" THEN 10000
	WHEN jobTitle = "VP Marketing" THEN 10000
	WHEN jobTitle LIKE "Sales Manager%" THEN 5000
	WHEN jobTitle = "Sales Rep" THEN 2000
END;

SELECT * FROM employees
WHERE salary >= 5000;

-- Retrieving all the columns from the "products" table where the "category" is Classic cars and the price is less than 100
SELECT * FROM products
WHERE productLine = "Classic cars" AND MSRP < 100; 

-- Retrieving the names of all the customers in alphabetical order
SELECT customerName FROM customers
ORDER BY customerName;

-- Retrieving total number of orders from the order table
SELECT COUNT(orderNumber)
FROM orders;

-- Retrieving the customer name and order date from the customers and order tables, joining them on the customer_id column
SELECT customers.customerName, orders.orderDate
FROM customers
RIGHT JOIN orders ON customers.customerNumber = orders.customerNumber;   

-- Retrieving the product name, category, and vendor name from the product and category tables joining them in appropriate columns
SELECT products.productName, productlines.productLine, products.productVendor
FROM products
JOIN productlines ON products.productLine = productlines.productLine;

-- Retrieving employee name and office name from employees and office tables joining them on office code column
SELECT CONCAT(employees.firstName, " ", employees.lastName) AS employeeName, offices.city
FROM employees
JOIN offices ON employees.officeCode = offices.officeCode;

-- Retrieving customer name and order amount from the customers and order tables joining them on the customer ID column, and only including orders with amount greater than 1000
SELECT customers.customerName, 
		SUM(orderDetails.quantityOrdered * orderDetails.priceEach) AS orderAmount
FROM customers
JOIN orders ON customers.customerNumber = orders.customerNumber
JOIN orderDetails ON orders.orderNumber = orderdetails.orderNumber
GROUP BY customerName
HAVING orderAmount > 50000;

-- Retrieving total number of orders for each customers from the orders table
SELECT customers.customerName, 
		COUNT(orders.orderNumber) AS totalOrders
FROM customers
JOIN orders ON customers.customerNumber = orders.customerNumber
GROUP BY customers.customerName;

-- Retrieving the average price of products in each category from the product table
SELECT productlines.productLine, AVG(products.buyPrice) AS avgPrice
FROM products
JOIN productlines ON products.productLine = productlines.productLine
GROUP BY productlines.productLine;

-- Retrieving the maximum salary for each department from the employees table
SELECT jobTitle, MAX(salary) AS maxSalary
FROM employees
GROUP BY jobTitle;

-- Retrieving the total revenue generated by each customers from the orders and orderDetail table
SELECT customers.customerName, 
		SUM(orderDetails.quantityOrdered * orderDetails.priceEach) AS totalRevenue
FROM customers
JOIN orders ON customers.customerNumber = orders.customerNumber
JOIN orderDetails ON orders.orderNumber = orderdetails.orderNumber
GROUP BY customers.customerName;

-- Updating the quantity column of the product table to 5000 for all products with a price greater than 100
UPDATE products
SET quantityInStock = 5000
WHERE MSRP > 100;

-- Deleting all the records from the customers table where the last_order_date is older than 1 year
-- Since all the record are older than 1yr i am just retrieving the customers with their fisrt and last order date
SELECT customers.customerName, 
		MIN(orders.orderDate) AS firstOrderDate,
        MAX(orders.orderDate) AS lastOrderDate
FROM customers
RIGHT JOIN orders ON customers.customerNumber = orders.customerNumber
GROUP BY customers.customerName;

-- Inserting discount column and assigning values to it
ALTER TABLE orderdetails
ADD COLUMN discount DECIMAL(10,2);

UPDATE orderdetails
SET discount = RAND();

-- Updating the discount column orderdetails table by increasing it by 5% for all order placed between a specific date
  UPDATE orderdetails
  SET discount = discount + (discount * 0.05)
  WHERE orderNumber IN (
	SELECT orderNumber FROM orders
    WHERE orderDate BETWEEN '2004-01-01' AND '2004-12-31'
    );

-- Retrieving all the products with price either above 50 or below 100
SELECT productName, MSRP
FROM products
WHERE MSRP NOT BETWEEN 50 AND 100
GROUP BY productName
ORDER BY MSRP;

-- Retrieving all the customers who do not having a postalCode specified in the database
SELECT customerName 
FROM customers
WHERE postalCode IS NULL;

-- Retrieving all the customers whose names start with 'A' and have the city containing 'US'
SELECT customerName, country 
FROM customers
WHERE customerName LIKE 'A%' AND country LIKE '%US%';

-- Retrieving the length of the product names from the product table 
SELECT productName, LENGTH(productName) AS nameLength
FROM products; 


-- Retrieving the average price of the products after applying 10% discount from the product table
SELECT productName, AVG(MSRP * 0.9) AS avgDiscountedPrice
FROM products
GROUP BY productName;

-- Retrieving all the products with price higher than the average price of all products
SELECT productName, MSRP
FROM products 
WHERE MSRP > (SELECT AVG(MSRP) FROM products);

-- Retrieving names of all employee whose salary is higher than the maximum salary of the sales department
SELECT CONCAT(firstName, " ", lastName) AS employeeName
FROM employees
WHERE salary > (SELECT MAX(salary) FROM employees WHERE jobTitle LIKE "SALES%");

-- Retrieving total number of products in each product category
SELECT productlines.productLine, COUNT(products.productCode) AS numberOfProducts
FROM productlines
RIGHT JOIN products ON productlines.productLine = products.productLine
GROUP BY productlines.productLine;

-- Retrieving all the products that belong to category with more than 10 products
SELECT p.productName, c.productLine
FROM products p
JOIN productlines c ON p.productLine = c.productLine
GROUP BY c.productLine
HAVING COUNT(*) > 10;

-- Creating a "High salary employees" that retrieves all the employees with a salary greater that 5000
SELECT CONCAT(firstName, " ", lastName) AS HighSalaryEmployees
FROM employees
WHERE salary > 5000; 

-- Creating a view named "OrderSummary" that retrieves the total order amount and the number of orders for each customer form the orders table
CREATE VIEW OrderSummary AS
SELECT c.customerName, 
		SUM(d.priceEach * d.quantityOrdered) AS totalOrderAmount,
        COUNT(d.orderNumber) AS numberOfOrders
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
JOIN orderdetails d ON o.orderNumber = d.orderNumber
GROUP BY c.customerName;
SELECT * FROM OrderSummary;
  
-- Creating an index on the email column for the customers table for fast searching
CREATE INDEX idxPostalCode ON customers(postalCode);
SHOW INDEX FROM customers;

-- Creating a view named "ProductInventory" that retrieves the product name and the available quantity for each product from the products table
CREATE VIEW ProductInventory AS
SELECT productName, quantityInStock
FROM products;
SELECT * FROM ProductInventory;

-- Creating a table named "People" with columns peopleID, name, and email, where the people ID is the primary key and the email must be unique
CREATE TABLE people(
	peopleId INT,
    name varchar(50),
	email varchar(50),
    PRIMARY KEY (peopleId),
    UNIQUE (email)
);

-- Creating a table named "Goods" with columns for goodsId, name, and price, where the goodsId is the primary key, and the price cannot be null.
CREATE TABLE goods(
	goodsId INT,
    name varchar(50),
    price FLOAT NOT NULL,
    PRIMARY KEY (goodsId)
    );

-- Creating a table named "Types" with columns for typesId, and name, where the typesId is the primary key, and the name must be unique.
CREATE TABLE types(
	typesId INT,
    name varchar(50),
    PRIMARY KEY (typesId),
    UNIQUE (name)
    );

-- Altering the "employees" table to add a new column named "address" of type VARCHAR(100)
ALTER TABLE employees
ADD COLUMN address VARCHAR(100); 

-- Renaming the table "clients" to "customers".
ALTER TABLE clients
RENAME customers;

-- Deleting the "productDescription" column from the table products table.
ALTER TABLE products
DROP COLUMN productDescription;

-- Modifying the "orders" table to change the data type of the "orderDate" column to DATE
ALTER TABLE orders
MODIFY COLUMN orderDate DATE;

-- Retrieving all employees and their respective managers from the employees table using self join.
SELECT e1.employeeNumber AS EmployeeID, e1.firstName AS EmployeeName,
       e2.employeeNumber AS ManagerID, e2.firstName AS ManagerName
FROM employees e1
LEFT JOIN employees e2 ON e1.reportsTo = e2.employeeNumber;

-- Retrieving all the orders that do not have any corresponding items in the "orderdetails" table using a subquery
SELECT * 
FROM orders 
WHERE NOT EXISTS(
	SELECT 1 
    FROM orderdetails
    WHERE orderdetails.orderNumber = orders.orderNumber
    );
-- This outputs to an empty table, means there are no orders which do not have any corresponding items in the "orderdetails" table

-- Retrieving all the products along with the quantity sold for each product from the products and orderdetails table using join and subquery.
SELECT p.productName, od.quantityOrdered AS quantitySold
FROM products p
RIGHT JOIN orderdetails od ON p.productCode = od.productCode
GROUP BY p.productName;

-- Starting a transaction and updating the "products" table by reducing the quantity of a product, and commiting the transaction
BEGIN;
UPDATE products
SET quantityInStock = quantityInStock - 1
WHERE productCode = "S10_1678";
COMMIT;

-- Creating a table copy of orderdetails as orderdetailsCopy
DROP TABLE IF EXISTS orderdetailsCopy;
CREATE TABLE orderdetailsCopy AS
SELECT orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber
FROM orderdetails;
SELECT * FROM orderdetailsCopy; 

-- Starting a transaction and deleting all records from the orders table, and rolling back the transaction
BEGIN;
DELETE FROM orderdetailsCopy;
ROLLBACK;

-- Inserting new value to the payment table
INSERT INTO payments
VALUES(103,"HE795116","2004-10-10", 1000);
-- SQL query to update the balance column of the accounts table by adding a specific amount, ensuring the consistency of the transaction
BEGIN;
UPDATE payments
SET amount = amount + 2000
WHERE checkNumber = "HE795116";
COMMIT;

-- Creating a stored procedure named "getCustomersOrders" that take customerID as input and retrieves all the order placed by that customer.
DELIMITER /
CREATE PROCEDURE getCustomerOrders(IN inputCustomerNumber INT) 
BEGIN
	SELECT * FROM orders
    WHERE customerNumber = inputCustomerNumber;
END/
DELIMITER ;    

CALL getCustomersOrders(121);















SELECT * FROM customers;
SELECT * FROM employees;
SELECT * FROM offices;
SELECT * FROM orderdetails;
SELECT * FROM orders;
SELECT * FROM payments;
SELECT * FROM productlines;
SELECT * FROM products;